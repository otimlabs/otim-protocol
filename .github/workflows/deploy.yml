name: Release and Deploy Contracts

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      # Release
      generate_tag:
        description: Generate new release tag
        type: boolean
        default: true
      custom_tag:
        description: Release tag override
        required: false
      
      # Backend Deploy
      backend_environment:
        description: Target service deployment environment
        default: "unstable"
        type: choice
        options:
          - "unstable"
          - "dev"
          - "prod"

      # Chain Config
      chain_name:
        description: Target blockchain network
        default: "devnet"
        type: choice
        options:
          - "devnet"
          - "odyssey"
          - "hoodi"
          - "sepolia"
      rpc_url:
        description: Blockchain RPC endpoint override
        required: false

      # Artifact Sync
      protocol_ref:
        description: 'otim-protocol repository reference'
        default: 'main'
      offchain_ref:
        description: 'otim-offchain repository reference'
        default: 'main'

env:
  BACKEND_ENVIRONMENT: ${{ github.event.inputs.backend_environment || 'unstable' }}
  CHAIN_NAME: ${{ github.event.inputs.chain_name || 'devnet' }}
  CHAIN_ID: ${{ (github.event.inputs.chain_name == 'odyssey' && '911867') || (github.event.inputs.chain_name == 'hoodi' && '560048') || (github.event.inputs.chain_name == 'sepolia' && '11155111') || '31338' }}
  RPC_URL: ${{ github.event.inputs.rpc_url || '' }}
  CHAIN_CONFIG_BUCKET: ${{ github.event.inputs.backend_environment == 'prod' && 'otim-chain-config-prod' || 'otim-chain-config-dev' }}

permissions:
  contents: write
  id-token: write

jobs:
  verify-artifacts:
    name: Verify Protocol and Offchain Artifacts
    uses: ./.github/workflows/artifacts.yml
    with:
      protocol_ref: ${{ inputs.protocol_ref || 'main' }}
      offchain_ref: ${{ inputs.offchain_ref || 'main' }}
    secrets:
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
  
  deploy-contracts:
    name: Deploy Contracts
    runs-on: ubuntu-latest
    needs: verify-artifacts
    outputs:
      rpc_url: ${{ steps.chain-config.outputs.rpc_url }}
      explorer_url: ${{ steps.chain-config.outputs.explorer_url }}
      chain_name: ${{ steps.chain-config.outputs.chain_name }}
    steps:
      - name: Check for artifacts mismatch
        if: ${{ needs.verify-artifacts.outputs.artifacts_match == 'false' }}
        run: |
          echo "Contract artifacts are not in-sync. Aborting deployment."
          exit 1

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: "recursive"

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@de808b1eea699e761c404bda44ba8f21aba30b2c # v1.3.1
        with:
          cache: true
          cache-key: ${{ github.job }}-${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ (env.BACKEND_ENVIRONMENT == 'prod') && secrets.PROD_AWS_CONTRACT_DEPLOYER_ROLE_ARN || secrets.DEV_AWS_CONTRACT_DEPLOYER_ROLE_ARN }}
          aws-region: us-east-2

      - name: Get chain configuration
        id: chain-config
        run: |
          CHAIN_CONFIG=$(aws s3 cp s3://$CHAIN_CONFIG_BUCKET/chain-config.json -)
          echo $CHAIN_CONFIG | tee chain-config.json

          # Get the default rpc_url from the chain config
          DEFAULT_RPC_URL=$(echo "$CHAIN_CONFIG" | jq -r --arg chainid "$CHAIN_ID" '.[$chainid].public_rpc_url')
          # Use RPC_URL env variable if set and non-empty, otherwise use DEFAULT_RPC_URL
          echo "rpc_url=${RPC_URL:-$DEFAULT_RPC_URL}" >> "$GITHUB_OUTPUT"

          echo "explorer_url=$(echo "$CHAIN_CONFIG" | jq -r --arg chainid "$CHAIN_ID" '.[$chainid].explorer_url')" >> "$GITHUB_OUTPUT"
          echo "chain_name=$(echo "$CHAIN_CONFIG" | jq -r --arg chainid "$CHAIN_ID" '.[$chainid].name')" >> "$GITHUB_OUTPUT"

      - name: Deploy smart contracts
        id: deploy-all-contracts
        env:
          AWS_KMS_KEY_ID: ${{ env.BACKEND_ENVIRONMENT == 'prod' && secrets.PROD_AWS_CONTRACT_DEPLOYER_KMS_KEY_ARN || secrets.DEV_AWS_CONTRACT_DEPLOYER_KMS_KEY_ARN }}
          ANVIL_DEPLOYER_PK: ${{ env.CHAIN_ID == '31338' && secrets.ANVIL_DEPLOYER_PK || secrets.OTIM_DEPLOYER_PK }}
          ANVIL_OWNER_PK: ${{ env.CHAIN_ID == '31338' && secrets.ANVIL_OWNER_PK || secrets.OTIM_OWNER_PK }}
          DEV_RPC_URL: ${{ steps.chain-config.outputs.rpc_url }}
          TRANSFER_GAS_CONSTANT: 30000
          TRANSFER_ERC20_GAS_CONSTANT: 30000
          REFUEL_GAS_CONSTANT: 30000
          REFUEL_ERC20_GAS_CONSTANT: 30000
        run: |
          forge script AnvilDeployAll --broadcast --rpc-url "$DEV_RPC_URL" \
            --private-keys "$ANVIL_DEPLOYER_PK" --private-keys "$ANVIL_OWNER_PK" 2>&1 | tee deployment_output.txt

      - name: Update chain configuration
        run: python3 .github/scripts/update_chain_config.py

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: deployment-artifacts
          path: |
            broadcast/AnvilDeployAll.s.sol/${{ env.CHAIN_ID }}/run-latest.json
            deployment_addresses.json
            updated-chain-config.json
            deployment_output.txt

      - name: Upload updated chain config
        run: |
          aws s3 cp updated-chain-config.json s3://$CHAIN_CONFIG_BUCKET/chain-config.json

      - name: Generate GitHub app token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Trigger downstream repository
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3
        with:
          token: ${{ steps.bot_token.outputs.token }}
          repository: otimlabs/otim-infrastructure
          event-type: offchain-main-deploy
          client-payload: |
            {
              "environment": "${{ env.BACKEND_ENVIRONMENT }}",
              "force_redeploy": true
            }

  customize-release-notes:
    name: Customize Release Notes
    runs-on: ubuntu-latest
    needs: deploy-contracts
    outputs:
      release_notes: ${{ steps.prepare-release-notes.outputs.release_notes }}
      latest_tag: ${{ steps.prepare-release-notes.outputs.latest_tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Download deployment artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
        with:
          name: deployment-artifacts
      
      - name: Prepare Release Notes
        id: prepare-release-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## Deployment Information:" > releaseNotes.md
          echo "**Chain:** ${{ needs.deploy-contracts.outputs.chain_name }}" >> releaseNotes.md
          echo "**Explorer URL:** ${{ needs.deploy-contracts.outputs.explorer_url }}" >> releaseNotes.md
          echo "**RPC URL:** ${{ needs.deploy-contracts.outputs.rpc_url }}" >> releaseNotes.md

          # Parse the console.log outputs
          cat deployment_output.txt | grep "created:" | while read -r line; do
            contract_name=$(echo "$line" | cut -d' ' -f1)
            contract_address=$(echo "$line" | cut -d' ' -f3)
            echo "- **$contract_name**: [$contract_address](${{ needs.deploy-contracts.outputs.explorer_url }}/address/$contract_address)" >> releaseNotes.md
          done
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat releaseNotes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create Release
    needs: customize-release-notes
    uses: ./.github/workflows/release.yml
    with:
      generate_tag: ${{ inputs.generate_tag || true }}
      custom_tag: ${{ inputs.custom_tag || needs.customize-release-notes.outputs.latest_tag }}
      release_notes: ${{ needs.customize-release-notes.outputs.release_notes }}
    permissions:
      contents: write
